Js prototype

자바에서의 static변수와 비슷한 역할을 한다

객체 생성문 밖에서 객체명.prototype.메소드=function(){...} 으로 선언할 수 있으며,
호출 할때는 객체명.메소드(); 로 객체내에 메소드가 있는것처럼 호출 할 수 있다.
prototype은 선언된 모든 객체가 공유한다


[---스택과 큐---]

스택 : LIFO구조, 마지막에 저장된 것을 제일 먼저 꺼냄(push, pop, peek: 다음에 꺼낼 데이터를 보기만하기)
-> 수식계산, 수식괄호검사, undo/redo, 뒤로/앞으로 등에 사용
큐 : FIFO구조, 제일 먼저 저장한 것을 제일 먼저 꺼냄(offer, poll, peek)
-> 최근 사용문서, 인쇄작업대기목록, 버퍼 등에 사용

Queue의 변형
-> 덱(Deque) : 양끝에서 저장(offer)과 삭제(poll)가능, Stack과 queue 의 결합
-> 우선순위 큐(PriorityQueue) : 우선순위가 높은 것부터 꺼냄(null 저장불가), 데이터를 저장할 때는 힙정렬을 수행함
(입력[3,1,5,2,4] -> 출력[1,2,3,4,5])
PriorityQueue에는 null을 저장할 수 없다(우선순위를 판별한 수 없으므로)
-> 블락킹 큐(BlockingQueue) : 비어있을 때는 꺼내기를, 가득 차 있을때는 넣는 걸 지정된 시간동안 지연시킴 -> 멀티쓰레드



[---Enumertation, Iterator, ListIterator---]

-> 컬렉션에 저장된 데이터를 읽어오는데 사용하는 인터페이스

‪Iterator
boolean hasNext() : 읽어 올 요소가 남아있는지 확인
Object next() : 다음 요소를 읽어온다, next()를 호출하기 전에 hasNext()를 호출해서 읽어 올 요소가 있는지 확인하는 것이 안전
void remove() : next()로 읽어 온 요소를 삭제, next()를 호출한 다음에 remove()를 호출해야함(선택적 기능)
void forEachRemaining(Consumer<? super E> action) : 컬렉션에 남아있는 요소들에 대해 지정된 작업(action)을 수행한다, 람다식을 사용하는 디폴트 메소드


Enumeration(Iterator의 구버전, 컬렉션 프레임워크가 도입되고 난 후부터 사용되지 않음)

ListIterator(Iterator의 접근성을 향상시킨 것, 단방향(next()->양방향previous())
-> List에만 사용할 수 있는데 반해, Iterator는 List와 Set 둘 다에 사용가능하다
boolean hasMoreElements() : 읽어 올 요소가 남아있는지 확인(Iterator의 hasNext()와 같다)
Object nextElement() : 다음 요소를 읽어 온다, nextElement()를 호출하기 전에 hasMoreElements()를 호출해서 읽어 올 요소가 남아있는지 확인하는것이 안전, Iterator의 next()와 같다

Iterator
-> 컬렉션에 저장된 요소들을 읽어오는 방법을 표준화 한 것
-> 컬렉션에 Iterator()를 호출해서 Iterator를 구현한 객체를 얻어서 사용
-> 컬렉션 인터페이스에 속해있으므로 List, Set도 Iterator()를 가지고있음
반면에 Map인터페이스의 경우 Collection인터페이스의 자손이 아니기 때문에 Iterator가 없음,
따라서 entrySet이나 keySet과 같은 메소드를 호출해서 Set Collection을 얻은다음에 Iterator를 호출해야 한다
(entrySet() : key와 value의 쌍을 얻은 다음에 Set컬렉션으로 변환하고, 
-> Iterator로 요소를 읽어오는 와중에 컬렉션이 변경되면 안됨(ConcurrentModificationException예외가 발생)
-> 저장된 요소의 갯수보다 더 많은 next()가 호출되면 에러발생
-> Iterator는 일회용이므로 다시 사용하려면 메소드를 다시 불러와서 사용해야 함

while(it.hasNext())
	System.out.println(it.next());
-> it.forEachRemaining(System. out::println); 한 문장으로 바꿀 수 있다(람다식)

ListIterator(자주 사용되지는 않음)
-> Iterator의 접근성을 향상시킨 것(단방향-> 양방향, 조상은 Iterator)
boolean hasNext() : 읽어 올 다음 요소가 남아있는지 확인
boolean hasPrevious() : 읽어 올 이전 요소가 남아있는지 확인
Object next() : 다음 요소를 읽어온다, next()를 호출하기 전에 hasNext()를 호출해서 읽어 올 요소가 있는지 확인하는것이 안전
Object previous() : 이전 요소를 읽어온다, previous()를 호출하기 전에 hasPrevious()를 호출해서 읽어 올 요소가 있는지 확인하는 것이 안전
int nextIndex() : 다음요소의 index를 리턴
int previousIndex() : 이전요소의 index를 리턴
void add(Object o) : 컬렉션에 새로운 객체(o)를 추가(선택적 기능)
void remove() : next() 또는 previous()로 읽어 온 요소를 삭제, 반드시 next()나 previous()를 먼저 호출한 다음에 이 메소드를 호출해야한다(선택적 기능)
void set(Object o) : next() 또는 previous()로 읽어 온 요소를지정된 객체로 변경한다, 반드시 next()나 previous()를 먼저 호출한 다음에 이 메소드를 호출해야한다(선택적 기능)
-> ListIterator는 List 인터페이스에 속해 있으므로 Set컬렉션에는 사용 불가



[---Arrays, Comparator, Comparable---]

Arrays : 배열을 다루기 편리한 메소드(static) 제공
1. 배열의출력 : toString()
2. 다차원배열의 비교와 출력 : deepToString(), equals()는 1차원배열, deepEquals()는 다차원배열
3. 배열의 복사 : copyOf(배열명, 복사할 길이), copyOfRange(배열명, 이 index부터, 이 index 전까지)
복사메소드는 배열의 복사 뿐만아니라 생성까지 해줌
4. 배열 채우기 : fill(배열명, 채울내용), setAll()은 람다식을 이용해 배열을 채우는 메소드
5. 배열을 List로 변환 : asList(Object... a)
List list=Arrays.asList(new Integer[]{1,2,3,4,5}); // list=[1,2,3,4,5]
List list=Arrays.asList(1,2,3,4,5); // list=[1,2,3,4,5]
list.add(6); // UnsupportedOperationException 예외 발생, list의 크기를 변경할 수 없음
-> asList로 생성된 List는 읽기전용이므로 List list=new ArrayList(Arryas.asList(1,2,3,4,5));

6. 배열의 정렬과 검색 : sort(배열명), binarySearch(배열명, 찾을 값)
binarySearch()에서 원하는 값을 찾지 못하면 음수를 리턴, binarySearch()를 사용하려면 항상 정렬되어있어야 한다

순차검색과 이진검색
-> 순차검색 : 처음부터 순서대로 검색
-> 이진검색 : 범위를 절반으로 나눠가며 검색(정렬필수)

Comparator와 Comparable(배열 Arrays.sort(), 컬렉션 Collections.sort() 뒤에 s가 없으면 클래스 있으면 인터페이스)
Comparable : 기본 정렬기준을 구현하는데 사용
Comparator : 기본 정렬기준외에 다른 기준으로 정렬하고자할 때 사용

compare(객체1, 객체2) : 객체 2개를 비교
compareTo(객체) : 주어진 객체를 자신과 비교

대부분의 경우, 클래스를 새로 작성했을 때 equals()와 hashCode()는 오버라이딩 해줘야 함

Arrays.sort(arr); // 기본 정렬기준(Comparable)으로 정렬
Arrays.sort(arr, new DescComp()); // DescComp에 구현된 정렬기준으로 정렬
그 외의 기준으로 정렬하려면 sort(Object[] objArr, Comparator c)를 쓰고 Comparator인터페이스를 구현한 객체를 지정해줘야 함

정렬이란?
두 값을 비교해서 자리 바꿈을 반복하는 것
-> 버블정렬, 선택정렬, 삽입정렬, 퀵정렬(*), 쉘정렬 등



[---HashSet과 TreeSet---] 순서X, 중복X

HaseSet
->Set인터페이스르 구현한 대표적인 컬렉션 클래스
-> 순서를 유지하려면, LinkedHashSet클래스를 사용하면 된다

TreeSet
-> 범위 검색과 정렬에 유리한 컬렉션 클래스
-> HashSet보다 데이터 추가, 삭제에 시간이 더 걸림

HashSet(boolean add(Object o))
-> HashSet은 객체를 저장하기 전에 기존에 같은 객체가 있는지 확인, 같은 객체가 없으면 저장하고(true) 있으면 저장하지 않음(false)
-> HashSet은 순서가 없지만 Iterator를 사용해서 요소를 꺼내올 때 나름의 규칙이 있으므로 무작위로 뽑아오려면 LinkedHashSet을 이용해야 한다
-> boolean add(Object o)는 저장할 객체의 equals()와 hashCode()를 호출해서 중복 확인을 하므로,
equals()오 hashCode()가 오버라이딩 되어 있어야 함(해주지 않으면 중복검사가 안됨)
JDK 1.8부터는 Object클래스에 hash라는 메소드가 생겨서 이걸 hashCode()에 이용해주면 된다
-> hashCode()의 오버라이딩 조건
1. 동일 객체에 대해 hashCode()를 여러번 호출해도 같은 값을 리턴해야 한다
2. equals()로 비교해서 true를 얻은 두 객체의 hashCode()값은 일치해야 한다
equals()로 비교한 결과가 false인 두 객체의 hashCode()값이 같을 수도 있다
그러나 성능 향상을 위해 가능하면 서로 다른 값을 리턴하도록 하자

TreeSet : 범위검색과 정렬에 유리
-> 범위검색과 정렬에 유리한 이진 검색 트리(binary search tree)로 구현
LinkedList처럼 각 요소(node)가 나무형태로 연결된 구조
-> 이진트리는 모든 노드가 최대 두개의 하위 노드를 갖음(부모-자식 관계)
-> 이진검색트리는 부모보다 작은 값을 왼쪽에, 큰 값은 오른쪽에 저장
class TreeNode{
TreeNode left;
Object element;
TreeNode right;
}
-> HashSet보다 데이터 추가, 삭제에 시간이 더 걸림(반복적인 비교 후 저장)

데이터 저장과정 boolean add(Object o)
-> TreeSet에 7,4,9,1,5의 순서로 데이터를 저장하면, 아래의 과정을 거친다
-> (루트부터 트리를 따라 내려가며 값을 비교, 작으면 왼쪽, 크면 오른쪽에 저장)
-> TreeSet은 중복을 허용하지 않으므로 중복된 값을 저장하려 하면 add()메소드가 false를 리턴
-> 그리고, Comparable을 구현하거나TreeSet을 비교할 때 사용할 Comparator를 구현해줘야 함

TreeSet() : 기본생성자
TreeSet(Collection c) : 주어진 컬렉션을 저장하는 TreeSet을 생성
TreeSet(Comparator comp) : 주어진 정렬기준으로 정렬하는 TreeSet을 생성
Object first() : 정렬된 순서에서 첫번째 객체를 리턴
Object last() : 정렬된 순서에서 마지막 객체를 리턴
Object ceiling(Object o) : 지정된 객체와 같은 객체를 리턴, 없으면 큰 값을 가진 객체 중 제일 가까운 값의 객체를 리턴, 없으면 null
Object floor(Object o) : 지정된 객체와 같은 객체를 리턴, 없으면 작은 값을 가진 객체 중 제일 가까운 값의 객체를 리턴, 없으면 null
Object higher(Object o) : 지정된 객체보다 큰 값을 가진 객체 중 제일 가까운 값의 객체를 리턴, 없으면 null
Object lower(Object o) : 지정된 객체보다 작은 값을 가진 객체 중 제일 가까운 값의 객체를 리턴, 없으면 null
SortedSet subSet(Object froElement, Object toElement) : 범위 검색(fromElement와 toElement사이)의 결과는 리턴(끝 범위인 toElement는 범위에 포함x)
SortedSet headSet(Object toElement) : 지정된 객체보다 작은 값의 객체들을 리턴
SortedSet tailSet(Object fromElement) : 지정된 객체보다 큰 값의 객체들을 리턴
SortedSet subSet(Object fromElement, Object toElement) : 범위검색(fromElement와 toElement사이)의 결과를 리턴(끝 범위인 toElement는 범위에 포함X)
SortedSet headSet(Object toElement) : 지정된 객체보다 작은 값의 객체들을 리턴
SortedSet tailSet(Object fromElement) : 지정된 객체보다 큰 값의 객체들을 리턴

Integer클래스 내에 자체적으로 Comparable을 구현했기 때문에 TreeSet에 정수를 넣어줘도 예외가 생기지 않는다

TreeSet은 내부적으로 TreeMap을 이용해 구현되어있다, HashSet또한 그렇다

TreeSet 트리순휘
-> 이진 트리의 모든 노드를 한번씩 읽는 것을 트리 순회라고 한다
-> 전위, 중위, 후위 순회법이 있으며, 중위 순회하면 오름차순으로 정렬